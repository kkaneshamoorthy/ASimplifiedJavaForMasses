package Memory;

import Instruction.Instruction;

import java.util.HashMap;

/***
 * This class is the intermediate representation of the Java class
 * It stores the intermediate representation of the source code
 */
public class JavaProgramTemplate {

    /***
     * Class name
     */
    private String className;

    /***
     * Intermediate representation of the source,
     * generated by the syntactic and semantic analyser
     */
    private HashMap<Integer, Instruction> instructionHashMap;

    public JavaProgramTemplate(HashMap<Integer, Instruction> instructionHashMap) {
        this.instructionHashMap = instructionHashMap;
        this.className = "temp";
    }

    /***
     * This method creates Java code for the class
     * @return
     */
    public String toString() {
        StringBuilder javaClass = new StringBuilder();
        HashMap<Integer, String> javaCode = this.codeGeneration(this.instructionHashMap);

        javaClass.append("import javax.swing.*;");
        javaClass.append("public class " + className + " { ");
        javaClass.append("private static int autoLoopIterator = 0;");

        for (Integer instructionCounter : javaCode.keySet())
            javaClass.append(javaCode.get(instructionCounter));

        javaClass.append("}");

        return javaClass.toString();
    }

    /***
     * Generates Java code of the intermediate representation (class body)
     * @param tokenisedInstruction
     * @return
     */
    private HashMap<Integer, String> codeGeneration(HashMap<Integer, Instruction> tokenisedInstruction) {
        HashMap<Integer, String> javaCode = new HashMap<>();

        for (Integer instructionCounter : tokenisedInstruction.keySet()) {
            Instruction instruction = tokenisedInstruction.get(instructionCounter);

            //Generates Java code of the intermediate representation by calling generateCode method
            // and stores it in a map retaining the order of instruction
            javaCode.put(instructionCounter, instruction.generateCode());
        }

        return javaCode;
    }

    public String getClassName() {
        return this.className;
    }
}
